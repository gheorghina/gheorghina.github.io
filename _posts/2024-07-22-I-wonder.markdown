---
layout: post
title:  "Why Tech Projects Still Fail Today?"
date:   2024-07-22 00:18:23 +0700
categories: [architecture, failing-projects]
---


How can it be that after so many years of successful projects being delivered with hundreds, if not thousands of books being written on the topic, frameworks being shaped based on the learnings of the giants, half of the group is still learning, discovering and failing miserably at delivering tech projects?

There are amazing teams, leaders and managers out there who know their craft, yet, I am still amazed today about how many teams are skipping all the steps just for the illusion of going "fast" and "agile".  

The common patterns I see repeating in projects which fail, get stuck, burn people out, create frictions and make businesses lose trust in tech, the projects you know are bound to fail even before they start, are the following:

1. The lack of detailed understanding of the status quo
2. The lack of understanding of the needs
3. The lack of detailed solution covering the needs
4. The lack of gap analysis from the status quo to the desired solution
5. A roadmap scribbled on a sheet of paper based on thin air understandings, which forgets about any risk topic that has to be addressed.
6. Endless discussions around how 5 is a bad plan, and asks to shrink the efforts.
7. No one cares to answer questions which address 1 to 4 points, as long as time and money can be shrunk in 5 due to pressure.
8. Coworkers with very low morale, spinning the wheel, burning out, without understanding any of the above, without being able to make an impact, grow and learn while doing the work.
9. Hope based project delivery, while making sure the risk of not hitting the fictionally deadlines is stated multiple times.
10. The surprise when after 6 months, 12 months or even longer, the projects still linger, while huge amounts of money were spent.

Did I mention collaboration? 

When structures, systems, mindsets are of nature to rank, compete against each other for earning money, deliver more, destroy, ensure the other sinks, redirect focus on other problems or "having" to gate keep secrets, no process, approach or good will can help. 
The sad truth with those approaches is that everyone looses in the end: the people, the company, the business.

## How would I change the above?

1. Make sure you understand the existing solutions, with their good and poor sides.
2. Make sure the needs are understood and at least high level documented, to reduce the risks of misunderstanding each other. A problem well defined, is a problem half solved.
3. Work on a solution, allow others the chance to participate. Brainstorming and solution spaces can bring so many benefits from getting clarity, to enabled learning and also for more robust solutions in a forum which enables the buy in.
4. Once Status Quo and Target Architectures are aligned, the gap represents only the transition steps required.
5. The transition steps can be added to a roadmap definition with clarity on work which can be parallelized or which has to be kept sequential.
6. The plan discussions for adjustments and optimizations would have a consistent basis which can enable healthy strategic alignments towards making things happen. Or at least bring clarity and transparency on why some area would require more time and effort.
7. The coworkers would work with the clarity of the vision and of the end goals. Those who would like to take more ownership and grow would have clarity on the open opportunities.
8. The deadlines would be guidelines to be used for understanding where the team is going and where it is at one point.
9. Then management can focus constructively on how to enable and support teams instead of endless frictions topped with pressure to achieve unreasonable targets.
10. Check out the bellow resources on continuous delivery and best practices for software delivery

If you are the leader, of any of the above steps, make sure you don't make everyone depend on you verbally having to explain the same things over and over again. 

Encourage the culture of trust, feedback, safety and collaboration. It will take one miles away, on paths in which you will not have to be alone.

## Many Other Reasons Why Projects Fail

Poor Planning and Management:

    Lack of Clear Vision 
    Inadequate Risk Management 
    Ineffective Project Management 

Technological Challenges:

    Unproven Technology
    Integration Problems 

Market Dynamics:

    Misjudging Market Needs 
    Competitive Pressure 

Financial Mismanagement:

    Cost Overruns 
    Revenue Shortfalls 

Team and Human Resource Issues:

    Talent Gaps 
    Poor Leadership 

Regulatory and Compliance Issues:

    Regulatory Hurdles 
    Compliance Failures 

External Factors:

    Economic Conditions 
    Geopolitical Risks 

Stakeholder Misalignment:

    Conflicting Interests 
    Lack of Buy-in 

## Additional Interesting Resources

- [Siliconned: How the tech industry solves fake problems, hoards idle workers, and makes doomed bets with other people's money](https://www.goodreads.com/book/show/215041537-siliconned?ac=1&from_search=true&qid=K6mEK9RW3J&rank=1)

- [Modern Software Engineering: Doing What Works to Build Better Software Faster, David Farley, Trisha Gee](https://www.goodreads.com/book/show/57345270-modern-software-engineering)

- [Continuous delivery](https://www.goodreads.com/book/show/8686650-continuous-delivery)



